# -*- coding: utf-8 -*-
"""
/***************************************************************************
 NvdbQgisPlugin
                                 A QGIS plugin
 Fetch data from nvdb and visualize it in QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-02-16
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Erlend Ellefsen
        email                : ekbe_97@hotmail.no
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path
# NVDB
from nvdbapiv3 import nvdbFagdata
from qgis._core import QgsProject, QgsEditorWidgetSetup, QgsWkbTypes, QgsVectorLayer, QgsProcessingException
from qgis import processing

from nvdbapiV3qgis3 import nvdbsok2qgis
from .nvdbobjects import *
from .nvdbareas import *

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the dialog
from .nvdb_qgis_plugin_dialog import NvdbQgisPluginDialog


class NvdbQgisPlugin:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """
        Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """

        # Save reference to the QGIS interface
        self.dlg = NvdbQgisPluginDialog()
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'NvdbQgisPlugin_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&NVDB QGIS')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('NvdbQgisPlugin', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)
        self.dlg.comboBox.currentIndexChanged[str].connect(self.comboBox_itemChanged)
        self.dlg.addButton.clicked.connect(self.addItem)
        self.dlg.removeButton.clicked.connect(self.removeItem)
        self.dlg.clearButton.clicked.connect(self.clearSelection)
        self.dlg.individCheck.toggled.connect(self.individualSelected)
        self.dlg.kommuneCheck.toggled.connect(self.kommuneSelected)
        self.dlg.kontraktCheck.toggled.connect(self.kontraktSelected)
        self.dlg.fylkeBox.currentIndexChanged[str].connect(self.getKommune)
        self.dlg.fylkeBox.currentIndexChanged[str].connect(self.getKontrakt)
        self.dlg.mergeButton.clicked.connect(self.mergeLayers)
        getAllData()

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/nvdb_qgis_plugin/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'nvdb_test'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&NVDB QGIS'),
                action)
            self.iface.removeToolBarIcon(action)

    def individualSelected(self):
        if self.dlg.individCheck.isChecked():
            self.dlg.kommuneCheck.setEnabled(False)
            self.dlg.kontraktCheck.setEnabled(False)
            self.dlg.fylkeBox.setEnabled(False)
            self.dlg.kommuneBox.setEnabled(False)
            self.dlg.kontraktBox.setEnabled(False)
        else:
            self.dlg.kontraktCheck.setEnabled(True)
            self.dlg.kommuneCheck.setEnabled(True)
            self.dlg.fylkeBox.setEnabled(True)

    def kommuneSelected(self):
        if self.dlg.kommuneCheck.isChecked():
            self.dlg.kommuneBox.setEnabled(True)
            self.dlg.individCheck.setEnabled(False)
            self.dlg.kontraktCheck.setEnabled(False)
            self.dlg.kontraktBox.setEnabled(False)
        else:
            self.dlg.kommuneBox.setEnabled(False)
            self.dlg.individCheck.setEnabled(True)
            self.dlg.kontraktCheck.setEnabled(True)

    def kontraktSelected(self):
        if self.dlg.kontraktCheck.isChecked():
            self.dlg.kontraktBox.setEnabled(True)
            self.dlg.individCheck.setEnabled(False)
            self.dlg.kommuneCheck.setEnabled(False)
            self.dlg.kommuneBox.setEnabled(False)
        else:
            self.dlg.kontraktBox.setEnabled(False)
            self.dlg.individCheck.setEnabled(True)
            self.dlg.kommuneCheck.setEnabled(True)

    def comboBox_itemChanged(self, index):
        items = getObjInCat(index)
        self.dlg.plainTextEdit.appendPlainText("Kategori: " + index)
        self.dlg.listWidgetObjects.clear()
        self.dlg.listWidgetObjects.addItems(items)

    def addItem(self):
        all_items = self.dlg.listWidgetObjects.selectedItems()
        for i in range(len(all_items)):
            self.dlg.listWidget.addItem(all_items[i].text())
            self.dlg.plainTextEdit.appendPlainText("Lagt til " + all_items[i].text())
        self.dlg.listWidgetObjects.clearSelection()

    def removeItem(self):
        selected_items = self.dlg.listWidget.selectedItems()
        if not selected_items:
            pass
        else:
            for i in range(len(selected_items)):
                r = self.dlg.listWidget.row(selected_items[i])
                self.dlg.plainTextEdit.appendPlainText("Fjernet " + selected_items[i].text())
                self.dlg.listWidget.takeItem(r)

    def clearSelection(self):
        self.dlg.listWidgetObjects.clearSelection()

    def getKommune(self, index):
        self.dlg.plainTextEdit.appendPlainText("Fylke: " + index)
        self.dlg.kommuneBox.clear()
        self.dlg.kommuneBox.addItems(getKommuneNavn(index))

    def getKontrakt(self, index):
        self.dlg.kontraktBox.clear()
        self.dlg.kontraktBox.addItems(getKontraktNavn(index))

    def mergeLayers(self):
        project = QgsProject.instance()
        completeLayerList = []
        for id, layer in project.mapLayers().items():
            currentLayerName = layer.name()
            currentLayerType = int(layer.wkbType())
            for id_2, layer_2 in project.mapLayers().items():
                secondLayerName = layer_2.name()
                secondLayerType = int(layer_2.wkbType())
                parameter1 = secondLayerName + "_2d"
                parameter2 = secondLayerName[:-3]
                parameter3 = secondLayerName + "_3d"
                parameter5 = int(repr(currentLayerType)[-1])
                parameter6 = int(repr(secondLayerType)[-1])

                if secondLayerName in currentLayerName and currentLayerType != secondLayerType and (currentLayerName == parameter1 or currentLayerName == parameter2 or currentLayerName == parameter3) and parameter5 == parameter6:
                    self.dlg.plainTextEdit.appendPlainText("SlÃ¥r sammen: " + currentLayerName + " " + str(currentLayerType) + " " + str(secondLayerType) + " "+ secondLayerName)
                    layerList = [layer, layer_2]
                    completeLayerList.append(layer)
                    completeLayerList.append(layer_2)
                    if len(currentLayerName) > len(secondLayerName):
                        completeLayerName = currentLayerName[:-3]
                    else:
                        completeLayerName = secondLayerName[:-3]
                    try:
                        processing.runAndLoadResults("qgis:mergevectorlayers", {'LAYERS':layerList,
                                'OUTPUT':completeLayerName + " " + QgsWkbTypes.displayString(currentLayerType)})
                    except QgsProcessingException:
                        completeLayerList = completeLayerList[:-2]
                        self.dlg.plainTextEdit.appendPlainText("Fikk problemer med Ã¥ slÃ¥ sammen " + str(currentLayerName) + " og " + str(secondLayerName))
                        self.dlg.plainTextEdit.appendPlainText(str(QgsProcessingException))

                    break
                else:
                    pass

        for i in completeLayerList:
            project.removeMapLayers([i.id()])

    def run(self):
        if self.first_start:
            self.first_start = False
        self.dlg.comboBox.clear()
        self.dlg.comboBox.addItems(sortCategories())
        self.dlg.fylkeBox.addItems(getFylkeNavn())
        self.dlg.kommuneBox.setEnabled(False)
        self.dlg.kontraktBox.setEnabled(False)
        self.dlg.show()
        result = self.dlg.exec_()
        if result:
            objList = [str(self.dlg.listWidget.item(i).text()) for i in range(self.dlg.listWidget.count())]
            for item in objList:
                item_text = item
                item_id = getID(item)
                item = nvdbFagdata(item_id)
                if self.dlg.kommuneCheck.isChecked():
                    kommuneID = getKommuneID(str(self.dlg.kommuneBox.currentText()))
                    item.filter({'kommune': kommuneID})
                elif self.dlg.kontraktCheck.isChecked():
                    item.filter({'kontraktsomrade': str(self.dlg.kontraktBox.currentText())})
                else:
                    fylkeID = getFylkeID(str(self.dlg.fylkeBox.currentText()))
                    item.filter({'fylke': fylkeID})
                nvdbsok2qgis(item, lagnavn=item_text)
            self.dlg.listWidget.clear()
